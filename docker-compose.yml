services:
  # PostgreSQL Database (Único container com múltiplas instâncias)
  postgres-dev:
    image: postgres:15-alpine
    container_name: changeapp-postgres-dev
    environment:
      POSTGRES_DB: changeapp_dev
      POSTGRES_USER: changeapp
      POSTGRES_PASSWORD: changeapp123
    ports:
      - "5433:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./init-databases.sql:/docker-entrypoint-initdb.d/01-init-databases.sql:ro
    networks:
      - changeapp-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U changeapp -d changeapp_dev && pg_isready -U changeapp -d changeapp_product_dev && pg_isready -U changeapp -d changeapp_transactions_dev"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Database para TransactionApi (Desenvolvimento)
  mongodb-dev:
    image: mongo:7.0
    container_name: changeapp-mongodb-dev
    environment:
      MONGO_INITDB_ROOT_USERNAME: changeapp
      MONGO_INITDB_ROOT_PASSWORD: changeapp123
      MONGO_INITDB_DATABASE: changeapp_transactions_dev
    ports:
      - "27018:27017"
    volumes:
      - mongodb_dev_data:/data/db
      - ./transactionApi/src/main/resources/db/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - changeapp-dev-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: changeapp-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - changeapp-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper (Requerido pelo Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: changeapp-zookeeper-dev
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_dev_data:/var/lib/zookeeper/data
      - zookeeper_dev_logs:/var/lib/zookeeper/log
    networks:
      - changeapp-dev-network
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc localhost 2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: changeapp-kafka-dev
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - kafka_dev_data:/var/lib/kafka/data
    networks:
      - changeapp-dev-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ExchangeApi (Desenvolvimento)
  exchange-api-dev:
    build:
      context: ./exchangeApi
      dockerfile: Dockerfile
    container_name: changeapp-exchange-api-dev
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-dev:5432/changeapp_dev
      SPRING_DATASOURCE_USERNAME: changeapp
      SPRING_DATASOURCE_PASSWORD: changeapp123
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      JAVA_OPTS: "-Xmx512m -Xms256m -Dspring.profiles.active=dev"
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka-setup:
        condition: service_completed_successfully
    networks:
      - changeapp-dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # TransactionApi (Desenvolvimento)
  transaction-api-dev:
    build:
      context: ./transactionApi
      dockerfile: Dockerfile
    container_name: changeapp-transaction-api-dev
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATA_MONGODB_HOST: mongodb-dev
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_DATABASE: changeapp_transactions_dev
      SPRING_DATA_MONGODB_USERNAME: changeapp
      SPRING_DATA_MONGODB_PASSWORD: changeapp123
      SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE: admin
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      JAVA_OPTS: "-Xmx512m -Xms256m -Dspring.profiles.active=dev"
    depends_on:
      mongodb-dev:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka-setup:
        condition: service_completed_successfully
    networks:
      - changeapp-dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Kafka Topics Setup (Configuração automática dos tópicos)
  kafka-setup:
    image: confluentinc/cp-kafka:7.4.0
    container_name: changeapp-kafka-setup
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Aguardando Kafka estar pronto...' &&
        sleep 10 &&
        echo 'Criando tópicos...' &&
        kafka-topics --bootstrap-server kafka:29092 --create --topic conversion-commands --partitions 3 --replication-factor 1 --if-not-exists &&
        kafka-topics --bootstrap-server kafka:29092 --create --topic conversion-events --partitions 3 --replication-factor 1 --if-not-exists &&
        echo 'Tópicos criados com sucesso!' &&
        kafka-topics --bootstrap-server kafka:29092 --list
      "
    networks:
      - changeapp-dev-network
    restart: "no"

  # ManagerProductApi (Desenvolvimento)
  manager-product-api-dev:
    build:
      context: ./managerProductApi
      dockerfile: Dockerfile
    container_name: changeapp-manager-product-api-dev
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-dev:5432/changeapp_product_dev
      SPRING_DATASOURCE_USERNAME: changeapp
      SPRING_DATASOURCE_PASSWORD: changeapp123
      JAVA_OPTS: "-Xmx512m -Xms256m -Dspring.profiles.active=dev"
    depends_on:
      postgres-dev:
        condition: service_healthy
    networks:
      - changeapp-dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_dev_data:
    driver: local
  mongodb_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  zookeeper_dev_data:
    driver: local
  zookeeper_dev_logs:
    driver: local
  kafka_dev_data:
    driver: local

networks:
  changeapp-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16 